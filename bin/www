#!/usr/bin/env node

/**
 * Module dependencies.
 */
import app from '../app.js';
import http from 'http';
import mongoose from 'mongoose';
import logger from '../util/logging.js'

//Set up MongoDB
const uri = `${process.env.DB_STRING}`;

/**
 * Get port from environment and store in Express.
*/

const port = normalizePort(process.env.SERVER_PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
*/

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
*/

try {
  await mongoose.connect(uri);
  logger.info('Connected to DB');
  server.listen(port, (err) => {
    if (err) console.error(err);
    logger.info('Server running...');
  });
} catch (err) {
  console.error(err)
}

const db = mongoose.connection;
db.on('error', console.error.bind(console,'DB connection error:'));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
*/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
*/

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.info(`Listening on ${bind}`);
}
